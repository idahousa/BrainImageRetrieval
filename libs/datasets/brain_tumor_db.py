import os
import h5py
import imageio
import numpy as np
class BrainTumorDataset:
    default_db_path = r"G:\roots\BrainTumorDataset\BrainTumorDataPublic"
    """Extract all downloaded files and grouped to a single folder that contain all 3064 '.mat' file"""
    """Copy the 'cvind.mat' to that folder also"""
    """Results: db_path/...
                       1.mat
                       2.mat
                       ...
                       3064.mat
                       cvind.mat"""
    def __init__(self,i_db_path=None):
        if i_db_path is None:
            self.db_path = self.default_db_path
        else:
            assert isinstance(i_db_path,str)
            assert os.path.exists(i_db_path)
            self.db_path = i_db_path
        self.indices = self.get_cv_indices(i_cvind_path=os.path.join(self.db_path,'cvind.mat'))
    @staticmethod
    def get_cv_indices(i_cvind_path=None):
        assert isinstance(i_cvind_path,str)
        assert os.path.exists(i_cvind_path)
        cv_indices = h5py.File(i_cvind_path,mode='r')
        indices    = np.array(cv_indices['/cvind']).astype(np.int)
        return np.squeeze(indices) #Array of [1,3064] of float in range (1, .., 5)
    @staticmethod
    def load_mat_file(i_file_path=None):
        """The downloaded dataset contains .mat file of images. This function is to load .mat file and store in ndarray"""
        """Note: 
        cjdata.label      : 1 for meningioma, 2 for glioma, 3 for pituitary tumor
        cjdata.PID        : patient ID
        cjdata.image      : image data
        cjdata.tumorBorder: a vector storing the coordinates of discrete points on tumor border.
		For example, [x1, y1, x2, y2,...] in which x1, y1 are planar coordinates on tumor border.
		It was generated by manually delineating the tumor border. So we can use it to generate
		binary image of tumor mask.
        cjdata.tumorMask  : a binary image with 1s indicating tumor region
        - Reference: https://github.com/gopiprasanthpotipireddy/BrainTumorClassification
        """
        assert isinstance(i_file_path,str)
        assert os.path.exists(i_file_path)
        assert i_file_path.endswith('.mat')
        matfile = h5py.File(i_file_path,mode='r')
        image   = np.array(matfile['/cjdata/image'])
        label   = np.array(matfile['/cjdata/label']).astype(np.int)
        mask    = np.mat(matfile['/cjdata/tumorMask']).astype(np.int)
        #pid    = np.array(matfile['/cjdata/PID'])
        #border = np.mat(matfile['/cjdata/tumorBorder'])
        image = (image - np.min(image)) / (np.max(image) - np.min(image))
        image = (image*255.0).astype(np.uint8)
        return image,label[0][0],mask
    def load_data(self,i_fold_index=1):
        assert isinstance(i_fold_index,int)
        assert 0<i_fold_index<=5
        train_db,val_db = [],[]
        for index,flag in enumerate(self.indices):
            file_path = os.path.join(self.db_path, '{}.mat'.format(index+1))
            image, label, mask = self.load_mat_file(i_file_path=file_path)
            if flag==i_fold_index:
                """This is a validation sample"""
                val_db.append((image,mask,label))
            else:
                """This is a train sample"""
                train_db.append((image,mask,label))
        print('Num train samples: ',len(train_db),' vs Num Validation samples: ',len(val_db))
        return train_db,val_db
    def save_images(self):
        """This function is to save images into distinguished directories according to labels."""
        save_path = os.path.join(os.getcwd(),'brain_tumor_db')
        if os.path.exists(save_path):
            pass
        else:
            os.makedirs(save_path)
        for index, flag in enumerate(self.indices):
            file_path = os.path.join(self.db_path, '{}.mat'.format(index + 1))
            image, label, mask = self.load_mat_file(i_file_path=file_path)
            save_file_path = os.path.join(save_path,'{}'.format(label))
            if not os.path.exists(save_file_path):
                os.makedirs(save_file_path)
            else:
                pass
            image_file_path = os.path.join(save_file_path,'{}_image.jpg'.format(index+1))
            mask_file_path  = os.path.join(save_file_path, '{}_mask.jpg'.format(index + 1))
            imageio.imsave(image_file_path,image)
            imageio.imsave(mask_file_path, mask)
if __name__ == '__main__':
    print('This module is to load and prepare data for classification system using the Brain Tumor Dataset')
    print('Dataset link: https://figshare.com/articles/dataset/brain_tumor_dataset/1512427')
    print('Reference: Cheng, Jun, et al. "Enhanced Performance of Brain Tumor Classification via Tumor Region Augmentation and Partition." PloS one 10.10 (2015).')
    print('Reference: Cheng, Jun, et al. "Retrieval of Brain Tumors by Adaptive Spatial Pooling and Fisher Vector Representation." PloS one 11.6 (2016).')
    dataset = BrainTumorDataset()
    #dataset.save_images()
    #train_db_1,val_db_1 = dataset.load_data(i_fold_index=1)
"""=================================================================================================================="""